name: py-tests
on:
  workflow_dispatch:
    inputs:
      debug:
        description: "If Debugging the Pipeline, Slack and Sonar events won't be triggered [default, false or true]"
        required: False
        default: "default"
  push:
    branches:
      - main
      - '0.[0-9]+.[0-9]+'
    paths-ignore:
      - 'openmetadata-docs/**'
      - 'openmetadata-docs-v1/**'
  pull_request_target:
    types: [ labeled, opened, synchronize, reopened ]
    paths:
      - "ingestion/**"
      - "openmetadata-service/**"
      - "openmetadata-spec/src/main/resources/json/schema/**"
      - "pom.xml"
      - "Makefile"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # disable debug by default for PRs
  DEBUG: ${{ inputs.debug == 'true' || (inputs.debug == 'default' && github.event_name != 'pull_request_target') }}

jobs:
  check-debug:
    runs-on: ubuntu-latest
    outputs:
      DEBUG: ${{ env.DEBUG }}
    steps:
      - run: echo "setting DEBUG=$DEBUG"

  generate-jobs:
    runs-on: ubuntu-latest
    outputs:
      session: ${{ steps.set-matrix.outputs.session }}
    steps:
      - uses: actions/checkout@v3
      - uses: wntrblm/nox@main
      - id: set-matrix
        shell: bash
        run: echo session=$(nox -f ingestion/noxfile.py --json -l -k 'not e2e' | jq -c '[.[].session]') | tee --append $GITHUB_OUTPUT

  py-run-tests:
    name: Session ${{ matrix.session }}
    needs:
      - generate-jobs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        session: ${{ fromJson(needs.generate-jobs.outputs.session) }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: true
          docker-images: false

      - name: Wait for the labeler
        uses: lewagon/wait-on-check-action@v1.3.3
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: Team Label
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 90

      - name: Verify PR labels
        uses: jesusvasquez333/verify-pr-label-action@v1.4.0
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          valid-labels: 'safe to test'
          pull-request-number: '${{ github.event.pull_request.number }}'
          disable-reviews: true

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Extract Python Version from Session
        id: extract-python-version
        run: |
          session_name="${{ matrix.session }}"
          python_version=$(echo "$session_name" | grep -oE '[0-9]+\.[0-9]+')
          echo "py-version=$python_version" >> $GITHUB_ENV

      - name: Setup Openmetadata Test Environment
        uses: ./.github/actions/setup-openmetadata-test-environment
        with:
          python-version: ${{ env.py-version }}
          args: "-m no-ui"
          ingestion_dependency: "mysql,elasticsearch,sample-data"

      - name: Run Python Tests & record coverage
        id: test
        run: |
          source env/bin/activate
          make NOX_FLAGS='-s "${{ matrix.session }}"' run_python_tests
        env:
          TESTCONTAINERS_RYUK_DISABLED: true

      - name: Upload coverage artifact for Python tests
        if: steps.test.outcome == 'success' && env.DEBUG == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.session }}
          path: ingestion/coverage/**/.coverage.*
          if-no-files-found: error
          include-hidden-files: true

      - name: Clean Up
        run: |
          cd ./docker/development
          docker compose down --remove-orphans
          sudo rm -rf ${PWD}/docker-volume

  sonar-cloud-coverage-upload:
    runs-on: ubuntu-latest
    needs:
      - py-run-tests
      - check-debug
    if: needs.check-debug.outputs.DEBUG == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y unixodbc-dev python3-venv librdkafka-dev gcc libsasl2-dev build-essential libssl-dev libffi-dev \
          unixodbc-dev libevent-dev python3-dev libkrb5-dev

      - name: Install coverage dependencies
        run: |
          make install_test

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ingestion/coverage
          merge-multiple: true

      - name: Generate report
        run: |
          if [ ! -d "ingestion/coverage/3.9" ] || [ -z "$(ls -A ingestion/coverage/3.9/.coverage.*)" ]; then
            echo "No coverage files found in ingestion/coverage/3.9"
            exit 1
          fi
          
          cd ingestion
          python ../scripts/rewrite_coverage_files.py coverage/3.9 src/
          coverage combine --keep -a coverage/3.9
          coverage report
          coverage xml -o ingestion/coverage.xml
          coverage html
          sed -e "s/$(python -c "import site; import os; from pathlib import Path; print(os.path.relpath(site.getsitepackages()[0], str(Path.cwd())).replace('/','\/'))")/src/g" ingestion/coverage.xml >> ingestion/ci-coverage.xml
          sed -i 's/src\/metadata/\/github\/workspace\/ingestion\/src\/metadata/g' ingestion/ci-coverage.xml
        shell: bash

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html-report
          path: ingestion/htmlcov
      # we have to pass these args values since we are working with the 'pull_request_target' trigger
      - name: Push Results in PR to Sonar
        id: push-to-sonar
        if: ${{ env.DEBUG == 'false' }}
        continue-on-error: true
        uses: sonarsource/sonarcloud-github-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.INGESTION_SONAR_SECRET }}
        with:
          projectBaseDir: ingestion/
          args: >
            -Dproject.settings=ingestion/sonar-project.properties
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.github.repository=OpenMetadata
            -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}
            -Dsonar.pullrequest.provider=github

      # next two steps are for retrying "Push Results in PR to Sonar" step in case it fails
      - name: Wait to retry 'Push Results in PR to Sonar'
        if: ${{ && env.DEBUG == 'false' && steps.push-to-sonar.outcome != 'success' }}
        run: sleep 20s
        shell: bash

      - name: Retry 'Push Results in PR to Sonar'
        uses: sonarsource/sonarcloud-github-action@master
        if: ${{ && env.DEBUG == 'false' && steps.push-to-sonar.outcome != 'success' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.INGESTION_SONAR_SECRET }}
        with:
          projectBaseDir: ingestion/
          args: >
            -Dproject.settings=ingestion/sonar-project.properties
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.github.repository=OpenMetadata
            -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}
            -Dsonar.pullrequest.provider=github
